# Generated by Django 3.2.13 on 2022-05-10 09:18

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0003_alter_fileobject_owner'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('django_celery_beat', '0015_edit_solarschedule_events_choices'),
    ]

    operations = [
        migrations.CreateModel(
            name='ServiceForBackup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Updated at')),
                ('service_name', models.CharField(max_length=255, unique=True, verbose_name='Service name')),
                ('source_folder', models.TextField(verbose_name='Service files source folder')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
            ],
            options={
                'verbose_name': 'Service for backup',
                'verbose_name_plural': 'Services for backups',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='RCloneProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Updated at')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Name')),
                ('description', models.TextField(verbose_name='Description')),
                ('prefix', models.CharField(max_length=255, unique=True, verbose_name='Prefix')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
            ],
            options={
                'verbose_name': 'RClone provider',
                'verbose_name_plural': 'RClone providers',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='BackupClient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Updated at')),
                ('storage_name', models.CharField(max_length=255, unique=True, verbose_name='Storage name')),
                ('login', models.CharField(max_length=255, verbose_name='Login')),
                ('password', models.CharField(max_length=255, verbose_name='Password')),
                ('client_name', models.ForeignKey(help_text='RClone provider name', null=True, on_delete=django.db.models.deletion.SET_NULL, to='backup.rcloneprovider', verbose_name='Client name')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
            ],
            options={
                'verbose_name': 'Backup client',
                'verbose_name_plural': 'Backup clients',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='Backup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Updated at')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Backup name')),
                ('status', models.CharField(choices=[('new', 'New'), ('started', 'Started'), ('archive_creating_started', 'Archive creating started'), ('archive_created', 'Archive created'), ('uploading_archive_to_storage', 'Uploading archive to storage'), ('archive_uploaded_to_storage', 'Archive uploaded to storage'), ('done', 'Done'), ('failed', 'Failed')], default='new', max_length=50)),
                ('is_active', models.BooleanField(default=False, verbose_name='Is backup active')),
                ('backups', models.ManyToManyField(blank=True, related_name='parent_backups', to='backup.Backup', verbose_name='Children backups')),
                ('clients', models.ManyToManyField(blank=True, related_name='backups', to='backup.BackupClient', verbose_name='Backup clients')),
                ('files', models.ManyToManyField(blank=True, to='core.FileObject', verbose_name='Files')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
                ('periodic_task', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='backups', to='django_celery_beat.periodictask', verbose_name='Periodic task')),
                ('services', models.ManyToManyField(to='backup.ServiceForBackup', verbose_name='Services for backups')),
            ],
            options={
                'verbose_name': 'Backup',
                'verbose_name_plural': 'Backups',
                'ordering': ('-created_at',),
            },
        ),
    ]
